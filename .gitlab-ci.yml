# GitLab CI/CD 파이프라인 설정
# ERP 시스템 - Spring Boot 백엔드 + React 프론트엔드

stages:
  - test
  - build
  - security
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  NODE_VERSION: "20"

cache:
  paths:
    - .m2/repository/
    - frontend/node_modules/

# 백엔드 테스트
backend-test:
  stage: test
  image: maven:3.9.4-openjdk-17
  services:
    - postgres:15
  variables:
    POSTGRES_DB: erp_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    SPRING_PROFILES_ACTIVE: test
    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/erp_test
    SPRING_DATASOURCE_USERNAME: postgres
    SPRING_DATASOURCE_PASSWORD: postgres
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS spotless:apply verify
  artifacts:
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
        - backend/target/failsafe-reports/TEST-*.xml
      coverage_report:
        coverage_format: jacoco
        path: backend/target/site/jacoco/jacoco.xml
  coverage: '/Total.*?([0-9]{1,3})%/'
  only:
    - main
    - develop
    - merge_requests

# 프론트엔드 테스트
frontend-test:
  stage: test
  image: node:20-alpine
  script:
    - cd frontend
    - npm ci
    - npm run lint
    - npm run test -- --coverage --reporter=junit --outputFile=./test-results.xml
  artifacts:
    reports:
      junit: frontend/test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - main
    - develop
    - merge_requests

# 백엔드 빌드 (WAR)
backend-build:
  stage: build
  image: maven:3.9.4-openjdk-17
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - backend/target/*.war
    expire_in: 1 week
  only:
    - main
    - develop

# 프론트엔드 빌드
frontend-build:
  stage: build
  image: node:20-alpine
  script:
    - cd frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
      - frontend/out/
    expire_in: 1 week
  only:
    - main
    - develop

# 보안 스캔
security-scan:
  stage: security
  image: maven:3.9.4-openjdk-17
  script:
    - cd backend
    - mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
  artifacts:
    reports:
      dependency_scanning: backend/target/dependency-check-report.json
    paths:
      - backend/target/dependency-check-report.html
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# 백엔드 배포 (WAR)
deploy-backend:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client sshpass
  script:
    - echo "WAR 파일을 톰캣 서버에 배포"
    - sshpass -p "$TOMCAT_PASSWORD" scp -o StrictHostKeyChecking=no backend/target/*.war $TOMCAT_USER@$TOMCAT_HOST:/opt/tomcat/webapps/
    - sshpass -p "$TOMCAT_PASSWORD" ssh -o StrictHostKeyChecking=no $TOMCAT_USER@$TOMCAT_HOST "sudo systemctl restart tomcat"
  only:
    - main
  when: manual
  environment:
    name: production
    url: https://erp.company.com

# 프론트엔드 배포
deploy-frontend:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client sshpass rsync
  script:
    - echo "정적 파일을 웹서버에 배포"
    - sshpass -p "$WEB_PASSWORD" rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" frontend/dist/ $WEB_USER@$WEB_HOST:/var/www/html/
  only:
    - main
  when: manual
  environment:
    name: production
    url: https://erp.company.com

# 개발 환경 배포
deploy-dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client sshpass
  script:
    - echo "개발 환경에 배포"
    - sshpass -p "$DEV_PASSWORD" scp -o StrictHostKeyChecking=no backend/target/*.war $DEV_USER@$DEV_HOST:/opt/tomcat/webapps/
    - sshpass -p "$DEV_PASSWORD" ssh -o StrictHostKeyChecking=no $DEV_USER@$DEV_HOST "sudo systemctl restart tomcat"
  only:
    - develop
  when: manual
  environment:
    name: development
    url: https://dev-erp.company.com

